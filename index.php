<?php
    if(isset($_POST['message']))
    {
        file_put_contents('hash.txt', $_POST['message']);
        echo '–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É';
        die;
    }
?>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞</title>
    <script src="jquery.js"></script>
    <script src="openpgp.min.js"></script>
    <style>
        .block {
            border: 1px solid;
            margin: 5px;
            padding: 5px;
            word-break: break-all;
        }
    </style>
    <script>
        function Utf8ArrayToStr(array) {
            var out, i, len, c;
            var char2, char3;

            out = "";
            len = array.length;
            i = 0;
            while(i < len) {
                c = array[i++];
                switch(c >> 4)
                {
                    case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
                    // 0xxxxxxx
                    out += String.fromCharCode(c);
                    break;
                    case 12: case 13:
                    // 110x xxxx   10xx xxxx
                    char2 = array[i++];
                    out += String.fromCharCode(((c & 0x1F) << 6) | (char2 & 0x3F));
                    break;
                    case 14:
                        // 1110 xxxx  10xx xxxx  10xx xxxx
                        char2 = array[i++];
                        char3 = array[i++];
                        out += String.fromCharCode(((c & 0x0F) << 12) |
                            ((char2 & 0x3F) << 6) |
                            ((char3 & 0x3F) << 0));
                        break;
                }
            }

            return out;
        }

        window.last_messages = JSON.parse('<?=file_get_contents('hash.txt');?>');

        async function _decrypt_me()
        {
            alert('–î–ª–∏–Ω–∞ —à–∏—Ñ—Ä–∞: ' + window.last_messages.length + ', –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω—É–∂–µ–Ω –ø–∞—Ä–æ–ª—å');

            toDecry = new Uint8Array(Object.values(window.last_messages));

            passwd = prompt('–ö–∞–∫–∏–º –ø–∞—Ä–æ–ª–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ? –ë–µ–∑ –Ω–µ–≥–æ –Ω–∏–∫–∞–∫ –Ω–µ —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–∞–º');

            if(!passwd)
                return;

            options = {
                message: await openpgp.message.read(toDecry), // parse encrypted bytes
                passwords: [passwd],              // decrypt with password
                format: 'binary'                          // output as Uint8Array
            };

            openpgp.decrypt(options).then(function(plaintext) {
                plain = plaintext.data;
                alert('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ' + Utf8ArrayToStr(plain));
                return plaintext.data // Uint8Array([0x01, 0x01, 0x01])
            }).catch(function(e) {
                alert('–û—à–∏–±–∫–∞: ' + e);
            });
        }

        function _encrypt_me()
        {
            str = $('#message').val();

            if(!confirm("–ë—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: " + str))
                return;

            passwd = prompt('–ü—Ä–∏–¥—É–º–∞–π –ø–∞—Ä–æ–ª—å. –ò–º –º—ã –≤—Å—ë –∑–∞—à–∏—Ñ—Ä—É–µ–º, –æ–Ω –∂–µ –ø–æ—Ç–æ–º –Ω—É–∂–µ–Ω –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏');

            if(!passwd)
                return;

            var options, encrypted;

            options = {
                message: openpgp.message.fromText(str), // input as Message object
                passwords: [passwd],                                             // multiple passwords possible
                armor: false,                                                             // don't ASCII armor (for Uint8Array output)
                compression: openpgp.enums.compression.zip
            };

            openpgp.encrypt(options).then(function(ciphertext) {
                encrypted = ciphertext.message.packets.write(); // get raw encrypted packets as Uint8Array

                $.post('', {'message': JSON.stringify(encrypted)}, function(ans) {
                    alert(ans);
                });
            });
        }
    </script>
</head>
<body>
    <div class="block">
        <img alt="Kitty" src="kitty.jpeg" align="right" />
        <h2>–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∏—Ç—Ç–∏ üêà</h2>
        <p>–≠—Ç–æ –º–æ—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∞–º–æ–ø–∏—Å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—á–∫–∞</p>
        <p>–Ø –ö–∏—Ç—Ç–∏, –∏ –º–æ—è —Ä–∞–±–æ—Ç–∞ - —à–∏—Ñ—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∏</p>
        <p>–ü–æ–∫–∞ —á—Ç–æ —Ä–∞–±–æ—Ç–∞—é –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ: —Ç—ã –ø–∏—à–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω–æ —à–∏—Ñ—Ä—É–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Ç–≤–æ–µ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ñ–∞–π–ª</p>
        <p>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏—à—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ–≤–æ–µ –ø–µ—Ä–µ–∑–∞—Ç–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ä–æ–µ</p>
        <p>–£ —Ç–µ–±—è –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∫–ª—é—á –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∫–∏, –∞ —É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ - –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º–æ–∂–µ—à—å –µ–º—É –∑–¥–µ—Å—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</p>
    </div>

    <div class="block">
        <p>–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É üòé</p>
        <p>
            <textarea style="width:100%;height:250px;" id="message" placeholder="–†–∞–∑ –¥–≤–∞ —Ç—Ä–∏ —á–µ—Ç—ã—Ä–µ –ø—è—Ç—å, —è –∫–∏—Å–∞"></textarea>
        </p>
        <input type="button" onclick="_encrypt_me()" value="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">
    </div>

    <div class="block">
        –®–∏—Ñ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –Ω—É–∂–µ–Ω –∫–ª—é—á)
        <div class="block">
            <?=file_get_contents('hash.txt');?>
        </div>

        <input type="button" onclick="_decrypt_me()" value="–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å" />
    </div>
</body>
</html>